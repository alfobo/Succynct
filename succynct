#!/bin/bash

#####################################################
#													#
# Succynct  |	Author  :   Alex Fontaine-Bolanos	#
#           |   Created :   17/8/2022               #
#													#
#####################################################
#TODO:
# x configExist: check if succynct-data exist
# x Check if an option was added
# x Add run and its contents
#   Add multiple source file

configExist(){
    if ( test -e succynct-data );then
        run
    else
        config
    fi
}

# Gathers the config data from succynct-data. Then executes the interval time. When the time is up, it compares the destination file/folder to that of the source. Then makes a copy.
run(){
    srcLine=$(($(sed -n "/Source/=" succynct-data)+1))
    destLine=$(($(sed -n "/Destination/=" succynct-data)+1))
    selectLine=$(($(sed -n "/Selection/=" succynct-data)+1))
    iLine=$(($(sed -n "/Intervals/=" succynct-data)+1))
    dateLine=$(($(sed -n "/Date/=" succynct-data)+1))
    src=$(sed -n "$srcLine p" succynct-data)
    dest=$(sed -n "$destLine p" succynct-data)
    s=$(sed -n "$selectLine p" succynct-data)
    i=$(sed -n "$iLine p" succynct-data)
    d=$(sed -n "$dateLine p" succynct-data)
    ti=$(($(date -d @$d +%s)-$(date +%s)))	# ti = Time interval.

    mtime(){
        stat -c %Y $1
    }

    fileSync(){
        destf=$dest/$(basename $src)    # Synced file/folder
        smtime=$(mtime $src)            # Last modified source time
        bmtime=$(mtime $destf)          # Last modified scynced time

        #Makes copy if none exist.
        if ( test ! -e $destf );then
            cp -a $src $dest
            chmod a-w $destf
            destf=$dest/$(basename $src)
            bmtime=$(mtime $destf)
        fi
        #Restores source file/folder if missing
        if ( test ! -e $src );then
            cp -a $destf $(dirname $src)
            chmod u+w $src
        fi
        #Checks modified time differences, then copy if there is any.
        if [ $smtime -gt $bmtime ];then
            cp -a $src $dest
            chmod a-w $destf
        fi
    }

    echo "Source: $src"
    echo "Destination: $dest"
    echo "Selection: $s"
    echo "Interval: $i"
    if [[ $s = "i" ]];then
        echo "Synchronisation at: $(date -d "+$i sec")"
    else
        echo "Synchronisation at: $(date -d @$d)"
    fi

    # Checks if synchronisation time has passed
    while true; do
        case $s in
            i)  fileSync
                echo "Synched at $(date)"
                echo "Next synchronisation at $(date -d "+$i sec")"
                sleep $i
                ;;
            d)	if [ $(date +%s) -ge $d ];then
                    fileSync
                    newDate=$(($(date -d "today $i" +%s)+(24*60*60))) # New date = +24h
                    sed -i "s/$d/$newDate/" succynct-data
                    d=$newDate
                    echo "Synched at $(date)"
                    echo "Next synchronisation at $(date -d @$d)"
                fi
                sleep $ti
                ti=$(($(date -d @$d +%s)-$(date +%s)))	# New interval updated.
                ;;
            w)	if [ $(date +%s) -ge $d ];then
                    fileSync
                    newDate=$(($(date -d "today $i" +%s)+(7*24*60*60))) # New date = +7 days
                    sed -i "s/$d/$newDate/" succynct-data
                    d=$newDate
                    echo "Synched at $(date)"
                    echo "Next synchronisation at $(date -d @$d)"
                fi
                sleep $ti
                ti=$(($(date -d @$d +%s)-$(date +%s)))
                ;;
            m)	if [ $(date +%s) -ge $d ];then
                    fileSync
                    newDate=$(date -d +month +%s) # New date = +1 month
                    sed -i "s/$d/$newDate/" succynct-data
                    d=$newDate
                    echo "Synched at $(date)"
                    echo "Next synchronisation at $(date -d @$d)"
                fi
                sleep $ti
                ti=$(($(date -d @$d +%s)-$(date +%s)))
                ;;
            y)	if [ $(date +%s) -ge $d ];then
                    fileSync
                    newDate=$(date -d +year +%s) # New date = +1 month
                    sed -i "s/$d/$newDate/" succynct-data
                    d=$newDate
                    echo "Synched at $(date)"
                    echo "Next synchronisation at $(date -d @$d)"
                fi
                sleep $ti
                ti=$(($(date -d @$d +%s)-$(date +%s)))
                ;;
        esac
    done
}

# Syncing configuration
config(){
    while true; do
        read -p "Source file/folder: " src
        if ( test ! -e $src ) || [ -z "$src" ]; then 			#If file/folder does not exist or empty(0)
            read -p $"File or Directory does not exit. Press ENTER to try again"
        else
            break
        fi
    done

    while true; do 								#If file/folder does not exist or empty(0)
        read -p "Destination folder: " dest
        if ( test ! -d $dest ) || [ -z "$dest" ]; then 			#If file/folder does not exist or empty(0)
            read -p $"Destination Directory does not exist. Press ENTER to try again."
        else
            break
        fi
    done

    while true ;do
        read -p "How do you want the source be synced?

            (i)	Intervals
            (d)	Daily
            (w)	Weekly
            (m)	Monthly	(Not implemented)
            (y)	Yearly	(Not Implemented)

            Select one: " s				# s = select

        case $s in
            i)	read -p "Choose an interval (min): " t
                break
                ;;
            d)	read -p "Choose time of day (24) (HH): " t
                break
                ;;
            w)	read -p "Starting date (YYYYMMDD) (DD recommended max at 28): " d
                read -p "Choose time of day (24) (HH): " t
                break
                ;;
            m)	read -p "Starting date (YYYYMMDD) (DD recommended max at 28): " d
                read -p "Choose time (24) (HH): " t
                break
                ;;
            y)	read -p "Starting date (YYYYMMDD): " d
                read -p "Choose time (24) (HH): " t
                break
                ;;
            *)	"Invalid input."
                ;;
        esac
    done

    echo "# Source" > succynct-data
    echo "# Destination" >> succynct-data
    echo "# Selection" >> succynct-data
    echo "# Intervals" >> succynct-data
    echo "# Date" >> succynct-data

    line=$(sed -n "/Source/=" succynct-data)
    sed -i "$line a$src" succynct-data

    line=$(sed -n "/Destination/=" succynct-data)
    sed -i "$line a$dest" succynct-data

    case $s in
        i)	t=$(($t*60))
            line=$(sed -n "/Selection/=" succynct-data)
            sed -i "$line a$s" succynct-data
            line=$(sed -n "/Intervals/=" succynct-data)
            sed -i "$line a$t" succynct-data
            ;;
        d)	d=$(date -d "today $t" +%s)
            line=$(sed -n "/Selection/=" succynct-data)
            sed -i "$line a$s" succynct-data
            line=$(sed -n "/Intervals/=" succynct-data)
            sed -i "$line a$t" succynct-data
            line=$(sed -n "/Date/=" succynct-data)
            sed -i "$line a$d" succynct-data
            ;;
        w)	d=$(date -d $d +%s)
            line=$(sed -n "/Selection/=" succynct-data)
            sed -i "$line a$s" succynct-data
            line=$(sed -n "/Intervals/=" succynct-data)
            sed -i "$line a$t" succynct-data
            line=$(sed -n "/Date/=" succynct-data)
            sed -i "$line a$d" succynct-data
            ;;
        m)	d=$(date -d $d +%s)
            line=$(sed -n "/Selection/=" succynct-data)
            sed -i "$line a$s" succynct-data
            line=$(sed -n "/Intervals/=" succynct-data)
            sed -i "$line a$t" succynct-data
            line=$(sed -n "/Date/=" succynct-data)
            sed -i "$line a$d" succynct-data
            ;;
        y)	d=$(date -d $d +%s)
            line=$(sed -n "/Selection/=" succynct-data)
            sed -i "$line a$s" succynct-data
            line=$(sed -n "/Intervals/=" succynct-data)
            sed -i "$line a$t" succynct-data
            line=$(sed -n "/Date/=" succynct-data)
            sed -i "$line a$d" succynct-data
            ;;
    esac
    # mv succynct-data ~/.local/share/succynct/
    # mv succynct-data <path to app startup at login>

    run
}

if [[ $1 = "-m" ]];then
    config
else
    configExist
fi
